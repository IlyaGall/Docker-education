version: '3.8'

services:
  # Сервис-загрузчик дампов (использует ваш образ из Docker Hub)
  dumps-loader:
    image: ilyagall01/postgres-dumps:v1
    environment:
      PASSWORD1: ${SHOP_DB_PASSWORD}
      PASSWORD2: ${PRODUCTS_DB_PASSWORD}
      PASSWORD3: ${FAVORITE_DB_PASSWORD}
      PASSWORD4: ${COMMENT_DB_PASSWORD}
      PASSWORD5: ${CLUSTER_DB_PASSWORD}
    volumes:
      - ./dumps:/dumps
    depends_on:
      postgres1:
        condition: service_healthy
      postgres2:
        condition: service_healthy
      postgres3:
        condition: service_healthy
      postgres4:
        condition: service_healthy
      postgres5:
        condition: service_healthy
    networks:
      - db-network

  # Сервис 1: ShopService
  postgres1:
    image: postgres:14
    container_name: shop-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${SHOP_DB_PASSWORD}
      POSTGRES_DB: ShopService
    ports:
      - "5001:5432"
    volumes:
      - pgdata1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ShopService"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - db-network

  # Сервис 2: ProductsService
  postgres2:
    image: postgres:14
    container_name: products-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${PRODUCTS_DB_PASSWORD}
      POSTGRES_DB: ProductsService
    ports:
      - "5002:5432"
    volumes:
      - pgdata2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ProductsService"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - db-network

  # Сервис 3: FavoriteService
  postgres3:
    image: postgres:14
    container_name: favorite-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${FAVORITE_DB_PASSWORD}
      POSTGRES_DB: FavoriteService
    ports:
      - "5003:5432"
    volumes:
      - pgdata3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d FavoriteService"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - db-network

  # Сервис 4: CommentService
  postgres4:
    image: postgres:14
    container_name: comment-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${COMMENT_DB_PASSWORD}
      POSTGRES_DB: CommentService
    ports:
      - "5004:5432"
    volumes:
      - pgdata4:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d CommentService"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - db-network

  # Сервис 5: ClusterService
  postgres5:
    image: postgres:14
    container_name: cluster-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${CLUSTER_DB_PASSWORD}
      POSTGRES_DB: ClusterService
    ports:
      - "5005:5432"
    volumes:
      - pgdata5:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ClusterService"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - db-network

volumes:
  pgdata1:
  pgdata2:
  pgdata3:
  pgdata4:
  pgdata5:

networks:
  db-network:
    driver: bridge